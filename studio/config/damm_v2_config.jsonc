{
  /* rpcUrl is required. You can switch between mainnet, devnet and localnet or use your own RPC URL. */
  "rpcUrl": "https://api.mainnet-beta.solana.com", // mainnet: https://api.mainnet-beta.solana.com | devnet: https://api.devnet.solana.com | localnet: http://localhost:8899

  /* dryRun is required. If true, transactions will be simulated and not executed. If false, transactions will be executed. */
  "dryRun": false,

  /* keypairFilePath is required and will be the payer + signer for all transactions */
  "keypairFilePath": "./keypair.json",

  /* computeUnitPriceMicroLamports is required and can be adjusted to fit your needs */
  "computeUnitPriceMicroLamports": 100000,

  /* quoteMint is required for the following actions:
   * 1. damm-v2-create-balanced-pool
   * 2. damm-v2-create-one-sided-pool
   * SOL: So11111111111111111111111111111111111111112 | USDC: EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v | any other token address
   */
  "quoteMint": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",

  /* Either use baseMint or createBaseToken, but not both.
   * baseMint can be provided via CLI using --base-mint parameter or in config
   * baseMint is required for the following actions:
   * 1. damm-v2-create-balanced-pool
   * 2. damm-v2-create-one-sided-pool
   */
  // "baseMint": "C44H9TzFhgCxpgzHud6VPpWvM4UEi67hzUdmNULV3Zs8",

  /* dammV2Config is only used in the following actions:
   * 1. damm-v2-create-balanced-pool
   * 2. damm-v2-create-one-sided-pool
   */
  "dammV2Config": {
    "creator": "HeKsnSjEYBQNQECEpv4fNgdDGeicLpwxNpspk3aY37Bh", // creator address
    "baseAmount": 1000000000, // base token amount
    "quoteAmount": null, // quote token amount
    "initPrice": 0.00005,     // ~$50,000 FDV at start (0.00005 * 1e9)
    "maxPrice": null, // max price (in terms of quote/base price)
    "poolFees": {
      "maxBaseFeeBps": 400, // max base fee (in basis points)
      "minBaseFeeBps": 400, // min base fee (in basis points)
      "numberOfPeriod": 0, // number of period
      "totalDuration": 0, // total duration (If activationType is 0 (slots), totalDuration = duration / 0.4 | If activationType is 1 (timestamp), totalDuration = duration)
      "feeSchedulerMode": 0, // 0 - Fee Scheduler: Linear | 1 - Fee Scheduler: Exponential
      "useDynamicFee": true,

      /* Optional Configuration.
       * Only used if useDynamicFee is true and if you want to configure dynamic fee.
       * If you don't want to configure dynamic fee, and useDynamicFee is true, the default fee will be 20% of minBaseFeeBps.
       * Formula: dynamicFee = (variableFeeControl * (volatilityAccumulator * binStep)^2 + 99_999_999_999) / 100_000_000_000
       */
      "dynamicFeeConfig": {
        "filterPeriod": 10, // Time period (in slots/seconds) over which volatility is measured and smoothed
        "decayPeriod": 120, // Time period (in slots/seconds) over which volatility accumulator decays back to zero
        "reductionFactor": 5000, // Volatility decay rate in basis points (5000 = 50% reduction per decay period)
        "variableFeeControl": 14460000, // Scaling factor that controls how much volatility affects dynamic fees
        "maxVolatilityAccumulator": 239 // Maximum allowed volatility accumulator value (caps dynamic fee calculation)
      }
    },
    "collectFeeMode": 1, // 0 - Both Token | 1 - Token B Only
    "activationType": 1, // 0 - Slot | 1 - Timestamp
    "activationPoint": null, // Activation time of the pool depending on activationType (Calculate in slots if activationType is 0 (slots) | Calculate in seconds if activationType is 1 (timestamp))
    "hasAlphaVault": false // If true, the alpha vault will be created after the pool is created
  }
}
